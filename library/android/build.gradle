apply plugin: 'com.android.library'

android {
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        buildConfigField("int", "BUILD_ID", jmessageBuildId)
        buildConfigField("int", "BUILD_ID_BASE", jmessageBaseId)
        buildConfigField("String", "SDK_VERSION", "\"" + jmessageSDKVersionName + "\"")
        //默认同步周期为5分钟
        buildConfigField("int", "DEFAULT_SYNC_INTERVAL_IN_SEC", "300")
        buildConfigField("boolean", "IS_PCLOUD", "true")
        buildConfigField("boolean", "IS_HAIXIN", "false")//海鑫渠道标记
        buildConfigField("boolean", "WITH_FASTDFS", "true")
        buildConfigField("String", "DEBUG_API_HOST", "\"183.232.42.208\"")
        buildConfigField("int", "DEBUG_API_HOST_PORT", "8080")
        buildConfigField("int", "DEBUG_API_SYNC_HOST_PORT", "8085")
        buildConfigField("String", "FASTDFS_TRACKER_HOST", "\"121.46.25.204\"")
        buildConfigField("int", "FASTDFS_TRACKER_PORT", "22122")
        buildConfigField("int", "FASTDFS_TRACKER_HTTP_PORT", "8080")
        buildConfigField("int", "MAX_MSG_LENGTH_IN_BYTE", "4 * 1024")
    }
    buildTypes {
        release {
            //如果不是本地开发状态，则将混淆打开
//            if ("false".equals(localdebug)) {
//                minifyEnabled true
//            } else {
            minifyEnabled false
//            }
            buildConfigField("int", "DEFAULT_SYNC_INTERVAL_IN_SEC", "300")
//            proguardFile 'proguard/proguard.cfg'
        }
        debug {
//            if ("false".equals(localdebug)) {
//                minifyEnabled true
//            } else {
            minifyEnabled false
//            }
            //debug包把默认同步周期改为2分钟，方便测试。
            buildConfigField("int", "DEFAULT_SYNC_INTERVAL_IN_SEC", "120")
//            proguardFile 'proguard/proguard-debug.cfg'
        }
        pcloud_withFastDFS.initWith(buildTypes.debug)
        pcloud_withFastDFS {
            buildConfigField("boolean", "IS_PCLOUD", "true")
            buildConfigField("boolean", "WITH_FASTDFS", "true")
            buildConfigField("String", "FASTDFS_TRACKER_HOST", "\"121.46.25.204\"")
            buildConfigField("int", "FASTDFS_TRACKER_PORT", "22122")
            buildConfigField("int", "FASTDFS_TRACKER_HTTP_PORT", "8080")
            buildConfigField("int", "MAX_MSG_LENGTH_IN_BYTE", "6 * 1024")//SDk对于消息整体的长度限制。
        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        //由于用到eventbus和bolts,里面依赖了android的api。设置此属性后单元测试中所有android里的api将返回默认值。
        unitTests.returnDefaultValues = true
    }

    //默认发布debug版本的库供其他项目调试使用
    defaultPublishConfig "debug"
}

ext {
    projectDemoDir = project.rootDir.absolutePath + "/app"
    distDemoDir = jmessageDistDir + "/demo"
    distLibsDir = jmessageDistDir + "/libs"
    jcenterModelLibDir = project.rootDir.absolutePath + "/jcenter-model/libs"
    zkmSrcFile = jmessageDistDir + "/zkm";
    releaseJarName = jmessageSDKName + "_v" + jmessageSDKVersionName + ".jar";
    debugJarName = jmessageSDKName + "_debug_v" + jmessageSDKVersionName + "_b" + jmessageRealBuildId + ".jar";
    pcloudJarName = jmessageSDKName + "_debug_v" + jmessageSDKVersionName + "_b" + jmessageRealBuildId + "_forPCloud" + ".jar";
    pcloudWithFastDFSJarName = jmessageSDKName + "_debug_v" + jmessageSDKVersionName + "_b" + jmessageRealBuildId + "_forPCloudWithFastDfs" + ".jar";
}

/**
 * 编译前的准备工作
 */
gradle.taskGraph.whenReady { taskGraph ->
    def depLibsPath = project.rootDir.absolutePath + "/android/depLibs"

    if (taskGraph.hasTask("assemblePcloud_withFastDFS")) {
        //准备编译之前，先把dist目录删掉
        delete(jmessageDistDir)
    }
    //将depLibs中的jar替换成release版的JCore
//    copyFileInclude(jCoreReleaseJarDir, depLibsPath, jCoreReleaseJarName, 'jcore-android.jar')
    copyFileInclude(jCoreReleaseJarDir, depLibsPath, 'jcore-android.jar', 'jcore-android.jar')
}

dependencies {
//    testCompile 'org.mockito:mockito-core:1.10.19'
//    testCompile 'junit:junit:4.12'
//    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
//    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
//    testCompile 'org.robolectric:robolectric:3.0'

    //如果不是debug模式，则用provided方式引用jcore，防止jcore被打包到jar中
    if ("false".equals(localdebug)) {
        provided files('depLibs/jcore-android_v1.1.0.jar')
    } else {
        compile files('depLibs/jcore-android_v1.1.0.jar')
    }
    compile "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

task cleanDocsDir(dependsOn: ['assembleRelease']) {
    doLast {
        delete(jmessageDistDir + "/docs")
    }
}

task prepareDocsDir(dependsOn: cleanDocsDir, type: Javadoc) {
    source = [files(project.rootDir.absolutePath + "/android/src/main/java/cn/jpush/im/android/api"),
              files(project.rootDir.absolutePath + "/android/src/main/java/cn/jpush/im/api"),
              files(project.rootDir.absolutePath + "/android/src/release/java/cn.jpush.im.android.api/")]
    destinationDir = file(jmessageDistDir + "/docs")
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.optionFiles = [file(project.rootDir.absolutePath + "/javadoc_args.txt")]
    failOnError false
}

public void prepareDemoDir() {

    delete(distDemoDir)

    copyFile(projectDemoDir, distDemoDir)
    copyFileInclude(distDemoDir, distDemoDir, "AndroidManifest_Example.xml", "AndroidManifest.xml")
    copyFileInclude(distDemoDir, distDemoDir, "build_example.gradle", "build.gradle")
    delete(distDemoDir + "/AndroidManifest_Example.xml")
    delete(distDemoDir + "/build_example.gradle")
    delete(distDemoDir + "/demo.iml")
    delete(distDemoDir + "/build")
    delete(distDemoDir + "/bin")

    replaceInFile(distDemoDir + "/src/im/sdk/debug/RegisterAndLoginActivity.java",
            "private boolean isTestVisibility = true;", "private boolean isTestVisibility = false;")
}

task preparePCloud_WithFastDfs_SDKFiles(dependsOn: [':JMessageFastDfs:jar', ':JMessageMp3Recorder:assemble', 'assemblePcloud_withFastDFS']) {
    doLast {
        prepareSDKFiles("pcloud_withFastDfs")
    }
}

task preparePCloud_WithFastDfs_Haixin_SDKFiles(dependsOn: [':JMessageFastDfs:jar', ':JMessageMp3Recorder:assemble', 'assembleHaixin']) {
    doLast {
        prepareSDKFiles("haixin")
    }
}

private prepareSDKFiles(String sdkJarDir) {
    prepareDemoDir()

    delete(distLibsDir)
    /** 将jmessage jar包拷贝到dist/libs中去**/
    copyJarFile("$project.buildDir" + "/intermediates/bundles/" + sdkJarDir, distLibsDir, pcloudWithFastDFSJarName);
    //私有云打包需要依赖release的jcore
    copyFile(jCoreReleaseJarDir, distLibsDir)
    copyFile(project.rootDir.absolutePath + "/android/src/main/jniLibs", distLibsDir)

    /** fastDfs jar包拷贝到dist/libs中去**/
    copyFileInclude(project.rootDir.absolutePath + "/library/JMessageFastDfs/build/libs/", distLibsDir, "JMessageFastDfs.jar", "jmessage-FastDfs.jar")

    /** 将lame for android jar包和so拷贝到dist/libs中去**/
    def JMessageMp3BundlePath = project.rootDir.absolutePath + "/library/JMessageMp3Recorder/build/intermediates/bundles/release"
    def JMessageMp3JNIPath = JMessageMp3BundlePath + "/jni"
    copyJarFile(JMessageMp3BundlePath, distLibsDir, "jmessage-mp3Recorder.jar")
    copyFile(JMessageMp3JNIPath, distLibsDir)

    /** 将dist/libs中所有文件整体拷贝一份到dist/demo/libs中**/
    copyFile(distLibsDir, distDemoDir + "/libs")
}

task BuildJmessageSDK_PCloudWithFastDFS(type: Zip, dependsOn: preparePCloud_WithFastDfs_SDKFiles) {
    archiveName = jmessageSDKName + "-v" + jmessageSDKVersionName + "-PC-WithFastDfs" + ".zip"
    destinationDir = file(jmessageDistDir)
    from(jmessageDistDir) {
        include 'docs/**'
        include 'libs/**'
        include 'demo/**'
    }
}
//task BuildJmessageSDK_PCloudWithFastDFS_Haixin(type: Zip, dependsOn: preparePCloud_WithFastDfs_Haixin_SDKFiles) {
//    archiveName = jmessageSDKName + "-v" + jmessageSDKVersionName + "-PC-WithFastDfs-Haixin" + ".zip"
//    destinationDir = file(jmessageDistDir)
//    from(jmessageDistDir) {
//        include 'docs/**'
//        include 'libs/**'
//        include 'demo/**'
//    }
//}
