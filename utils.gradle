//解析XML时候要引入这个groovy的package

def copyFile(String srcFile, dstFile) {
    //拷贝文件函数，用于将最后的生成物拷贝到指定的目录
    copy {
        from(srcFile)
        into(dstFile)
    }
}

def copyJarFile(String srcDirl, dstDir, jarName) {
    //拷贝文件函数，用于将最后的生成物拷贝到指定的目录
    copy {
        delete(dstDir + jarName)
        from(srcDirl)
        into(dstDir)
        include('classes.jar')
        rename('classes.jar', jarName)
    }
}

def copyFileInclude(String srcDirl, dstDir, includeName, newName) {
    //拷贝文件函数，用于将最后的生成物拷贝到指定的目录
    delete(dstDir + newName)
    copy {
        from(srcDirl)
        into(dstDir)
        include(includeName)
        rename(includeName, newName)
    }
}

def copyFileInclude(String srcDirl, dstDir, includeName) {
    //拷贝文件函数，用于将最后的生成物拷贝到指定的目录
    copy {
        from(srcDirl)
        into(dstDir)
        include(includeName)
    }
}

def copyApkFile(String srcDirl, dstDir, apkName) {
    //拷贝文件函数，用于将最后的生成物拷贝到指定的目录
    delete(dstDir + apkName)
    copy {
        from(srcDirl)
        into(dstDir)
        include(apkName)
    }
}

def copyApkFile(String srcDirl, dstDir, apkName, inclueApkname) {
    //拷贝文件函数，用于将最后的生成物拷贝到指定的目录
    copy {
        delete(dstDir + apkName)
        from(srcDirl)
        into(dstDir)
        include(inclueApkname)
        rename(inclueApkname, apkName)
    }
}

//对于android library编译，我会disable所有的debug编译任务
def disableDebugBuild() {
    //project.tasks包含了所有的tasks，下面的findAll是寻找那些名字中带debug的Task。
    //返回值保存到targetTasks容器中
    def targetTasks = project.tasks.findAll { task ->
        task.name.contains("Debug")
    }
    //对满足条件的task，设置它为disable。如此这般，这个Task就不会被执行
    targetTasks.each {
        println "disable debug task  :${it.name}"
        it.setEnabled false
    }
}

def zkmJarFile(String sourceJarPath, String coreJarPath, String distPath) {
    def zkmScriptPath = distPath + '/default_zkm_script.txt'
    delete(zkmScriptPath)
    delete(distPath + "/zkm/classes.jar")
    copy {
        from "$project.rootDir"
        include 'default_zkm_script.txt'
        into distPath
        expand([
                javaroot : javadir,
                sdkroot  : sdkdir,
                coredir  : coreJarPath,
                sdktarget: sdk_target,
                openfile : sourceJarPath,
                distdir  : distPath + "/zkm"

        ])
    }
    ant.taskdef(name: 'ZKM', classname: 'ZKMTask', classpath: "$project.rootDir" + "/ZKM/ZKM.jar")
    ant.ZKM(defaultDirectoryName: '.', defaultExcludeFileName: 'defaultExclude.txt', defaultTrimExcludeFileName: 'defaultTrimExclude.txt', isParseOnly: 'false', isVerbose: 'true', logFileName: 'ZKM.log', scriptFileName: zkmScriptPath, trimLogFileName: 'ZKM_TrimLog.txt')

}

def replaceInFile(String path, String srcString, String destString) {
    def updatedContent = new File(path).getText('UTF-8').replaceAll(
            srcString, destString)
    new File(path).write(updatedContent, 'UTF-8')
}

//将函数设置为extra属性中去，这样，加载utils.gradle的Project就能调用此文件中定义的函数了
ext {
    copyFile = this.&copyFile
    disableDebugBuild = this.&disableDebugBuild
    copyJarFile = this.&copyJarFile
    copyFileInclude = this.&copyFileInclude
    copyApkFile = this.&copyApkFile
    zkmJarFile = this.&zkmJarFile
    replaceInFile = this.&replaceInFile
}