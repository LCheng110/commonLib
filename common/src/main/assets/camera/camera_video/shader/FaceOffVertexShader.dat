attribute vec4 position;
attribute vec2 inputTextureCoordinate;
attribute vec2 inputGrayTextureCoordinate;
varying vec2 canvasCoordinate;
varying vec2 textureCoordinate;
varying vec2 grayTextureCoordinate;

uniform vec2 canvasSize;
uniform float positionRotate;

mat4 posMatRotate = mat4(1.0, 0.0, 0.0, 0.0,
                         0.0, 1.0, 0.0, 0.0,
                         0.0, 0.0, 1.0, 0.0,
                         0.0, 0.0, 0.0, 1.0);

mat4 mat4RotationYXZ(mat4 m, float xRadians, float yRadians, float zRadians) {
    /*
     |  cycz + sxsysz   czsxsy - cysz   cxsy  0 |
 M = |  cxsz            cxcz           -sx    0 |
     |  cysxsz - czsy   cyczsx + sysz   cxcy  0 |
     |  0               0               0     1 |

     where cA = cos(A), sA = sin(A) for A = x,y,z
     */

    float cx = cos(xRadians);
    float sx = sin(xRadians);
    float cy = cos(yRadians);
    float sy = sin(yRadians);
    float cz = cos(zRadians);
    float sz = sin(zRadians);

    m[0][0] = (cy * cz) + (sx * sy * sz);
    m[0][1] = cx * sz;
    m[0][2] = (cy * sx * sz) - (cz * sy);
    m[0][3] = 0.0;

    m[1][0] = (cz * sx * sy) - (cy * sz);
    m[1][1] = cx * cz;
    m[1][2] = (cy * cz * sx) + (sy * sz);
    m[1][3] = 0.0;

    m[2][0] = cx * sy;
    m[2][1] = -sx;
    m[2][2] = cx * cy;
    m[2][3] = 0.0;

    m[3][0] = 0.0;
    m[3][1] = 0.0;
    m[3][2] = 0.0;
    m[3][3] = 1.0;

    return m;
}

void main(){
    vec4 framePos = position;

    framePos.x = framePos.x * canvasSize.x * 0.5;
    framePos.y = framePos.y * canvasSize.y * 0.5;
    posMatRotate = mat4RotationYXZ(posMatRotate, 0.0, 0.0, positionRotate);
    framePos = posMatRotate * framePos;
    framePos.x = framePos.x * 2.0 / canvasSize.x;
    framePos.y = framePos.y * 2.0 / canvasSize.y;

    gl_Position = framePos;
    canvasCoordinate = vec2(framePos.x * 0.5 + 0.5, framePos.y * 0.5 + 0.5);
    textureCoordinate = inputTextureCoordinate;
    grayTextureCoordinate = inputGrayTextureCoordinate;
}