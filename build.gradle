// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        //添加 Sensors Analytics maven 库地址
        maven {
            url 'https://dl.bintray.com/zouyuhan/maven'
        }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.google.com' }
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
        classpath 'me.tatarka:gradle-retrolambda:3.7.0' // 使用第三方的Java8兼容插件，retrolambda
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2' // add greendao plugin
        classpath 'com.meituan.android.walle:plugin:1.1.5'  // Walle Gradle插件的依赖

        //添加 Sensors Analytics android-gradle-plugin 依赖
        classpath 'com.sensorsdata.analytics.android:android-gradle-plugin2:1.0.3'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    apply plugin: 'me.tatarka.retrolambda'  // 使用第三方的Java8兼容插件，retrolambda
    repositories {
        jcenter()
        // To use support libraries starting from version 26.0.0 you need to add Google's Maven repository to your project's build.gradle file

        maven { url "https://maven.google.com" }
        maven { url 'http://developer.huawei.com/repo/' }
        maven { url 'https://jitpack.io' }
        maven {url "https://oss.sonatype.org/content/repositories/snapshots/"}  // activeandroid
        //添加 Sensors Analytics maven 库地址
        maven {
            url 'https://dl.bintray.com/zouyuhan/maven'
        }
        //西瓜信用仓库地址
        maven { url 'https://dl.bintray.com/mtbfma/Ecalib'}
        flatDir {
            dirs '../live/libs','../common/libs','../social/libs'
            dirs project(':common').file('libs')
        }

        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Global variables definition
ext {
    // Sdk and tools
    compileSdkVersion = 26
    buildToolsVersion = '26.0.1'
    minSdkVersion = 19
    targetSdkVersion = 26

    // VersionName and versionCode

    versionName = "4.2.0"
    versionCode = 420
    // App dependencies
    supportLibraryVersion = '27.1.1'
    junitVersion = '4.12'
//    mockitoVersion = '1.10.19'
//    hamcrestVersion = '1.3'
//    runnerVersion = '0.5'

    // Third part
    rxjavaVersion = '2.1.1'
    rxandroidVersion = '2.0.1'
    glideVersion = '4.0.0'
}

ext {
    //从配置文件中解析出相关的配置信息以供gradle内部使用。在xml中一样会解析。
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    jmessageDistDir = project.rootDir.absolutePath + "/dist";
    jCoreReleaseJarDir = project.rootDir.absolutePath + "/android/releaseLibs/";
    jCoreDebugJarDir = project.rootDir.absolutePath + "/android/debugLibs/";
    sdkdir = properties.getProperty("sdk.dir")
    javadir = properties.getProperty("java.dir")
    jCoreReleaseJarName = properties.getProperty("release-jcore-jar")
    jCoreDebugJarName = properties.getProperty("debug-jcore-jar")

    sdk_target = properties.getProperty("android-target")
    if (sdk_target == null) {
        sdk_target = "android-19"
    }

    //true本地调试使用compile集成各个sdk。false:打包时需将依赖方式换成provide的方式
    localdebug = properties.getProperty("sdk-local-debug")
    if (localdebug == null) {
        localdebug = "true"
    }
    jmessageSDKName = properties.getProperty("im-sdk-name");
    if (null == jmessageSDKName) {
        jmessageSDKName = "jmessage-android";
    }

    jmessageSDKVersionName = properties.getProperty("version_name");
    if (null == jmessageSDKVersionName) {
        jmessageSDKVersionName = "2.2.1"
    }

    jmessageBaseId = properties.getProperty("jmessage-build-base-id")
    if (jmessageBaseId == null) {
        jmessageBaseId = "710"
    }

    jmessageBuildId = String.valueOf(gradle.ext.buildId);

    jmessageRealBuildId = ((jmessageBaseId == null) ? 0
            : Integer.parseInt((String) jmessageBaseId)) + ((gradle.ext.buildId == null) ? 0
            : Integer.parseInt((String) gradle.ext.buildId))
}

//为每个子Project加载utils.gradle 。当然，这句话可以放到buildscript花括号之后
apply from: rootProject.getRootDir().getAbsolutePath() + "/utils.gradle"


configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '27.1.0'
            }
        }
    }
}

//ext {
//    configs = [
//            compileSdkVersion: 26,
//            buildToolsVersion: '26.0.1',
//            minSdkVersion    : 17,
//            targetSdkVersion : 26,
//            versionCode      : 1,
//            versionName      : '1.0.0',
//    ]
//
//    supportLibraryVersion = '26.1.0'
//    constraintVersion = '1.1.0-beta1'
//    flexboxVersion = '0.3.0'
//
//    libs = [appcompatV7     : "com.android.support:appcompat-v7:$supportLibraryVersion",
//            supportV4       : "com.android.support:support-v4:$supportLibraryVersion",
//            recyclerView    : "com.android.support:recyclerview-v7:$supportLibraryVersion",
//            cardview        : "com.android.support:cardview-v7:$supportLibraryVersion",
//            design          : "com.android.support:design:$supportLibraryVersion",
//            constraintLayout: "com.android.support.constraint:constraint-layout:$constraintVersion",
//    ]
//}